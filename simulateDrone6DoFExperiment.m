function simulation = simulateDrone6DoFExperiment(controller, dynamics, experiment)
% simulation = simulateDrone3DoFExperiment(controller, dynamics,
% experiment) simulates an experiment of the 6 DoF drone. The inputs
% controller and dynamics are obtained through the functions
% designController6DoF() and getDroneDynamics6DoF(), respectively.
% The character experiment defines which experiment will be executed. The
% output simulation contains trajectories generated by the simulation.

tf = 10;
xr.signals.dimensions = 1;
yr.signals.dimensions = 1;
zr.signals.dimensions = 1;
psir.signals.dimensions = 1;
dt = 1e-3;

if experiment == 'a'
    xr.time = [0; tf];
    xr.signals.values = [0; 0];
    yr.time = [0; tf];
    yr.signals.values = [0; 0];
    zr.time = [0; tf];
    zr.signals.values = [1; 1];
    psir.time = [0; tf];
    psir.signals.values = [0; 0];
elseif experiment == 'b'
    xr.time = [0; 1 - dt; 1; tf];
    xr.signals.values = [0; 0; 5; 5];
    yr.time = [0; 1 - dt; 1; tf];
    yr.signals.values = [0; 0; 5; 5];
    zr.time = [0; tf];
    zr.signals.values = [1; 1];
    psir.time = [0; tf];
    psir.signals.values = [0; 0];
elseif experiment == 'c'
    tp = 2.0;
    tf = 20.0;
    t = (tp+dt:dt:(tf-tp))';
    amplitude = 5.0;
    xr.time = [0.0; tp - dt; t; tf];
    xr.signals.values = [0.0; amplitude; amplitude * cos(2 * pi * (t - 2) / (tf - 2.0 * tp)); amplitude];
    yr.time = [0.0; tp - dt; t; tf];
    yr.signals.values = [0.0; 0.0; amplitude * sin(2 * pi * (t - 2) / (tf - 2.0 * tp)); 0.0];
    zr.time = [0.0; tf];
    zr.signals.values = [2.0; 2.0];
    psir.time = [0; tp; t; t(end) + dt; tf];
    psir.signals.values = [0; pi /2; wrapToPi(2 * pi * (t - 2) / (tf - 2.0 * tp) + pi / 2); pi / 2; 0];

elseif experiment == 'd'
    tf = 40;
    tp = 2.0;
    t = (tp+dt:dt:(tf-tp))';
    amplitude = 5.0;
    xr.time = [0; tp; t; tf];
    xr.signals.values = [0; 0; amplitude * cos(3 * 2 * pi * (t - tp) / (tf - 2.0 * tp) + pi / 2); 0];
    yr.time = [0; tp; t; tf];
    yr.signals.values = [0; 0; amplitude * sin(2 * 2 * pi * (t - tp) / (tf - 2.0 * tp)); 0];
    zr.time = [0; tf];
    zr.signals.values = [2; 2];
    dxr = -3 * 2 * pi * (tf - 2.0 * tp)^-1 * sin(3 * 2 * pi * (t - tp) / (tf - 2.0 * tp) + pi / 2);
    dyr = 2 * 2 * pi * (tf - 2.0 * tp)^-1 * cos(2 * 2 * pi * (t - tp) / (tf - 2.0 * tp));
    psir.time = [0; tp; t; t(end) + dt; tf];
    psir.signals.values = [0; atan2(dyr(1), dxr(1)); atan2(dyr, dxr); atan2(dyr(end), dxr(end)); 0];
    
    
 elseif experiment == "e"
    tf = 40;
    tp = 2.0;
    t = (tp+dt:dt:(tf/1.1-tp))';
    assignin('base', 'x0', 0);
    assignin('base', 'y0', 0);
    assignin('base', 'z0', .5);
    assignin('base', 'phi0', 0);
    assignin('base', 'theta0', 0);
    assignin('base', 'psi0', 0);
    xr.time = [0; tp; tp*2 ; tf];
    xr.signals.values = [0; 1 ; 2; 3];
    yr.time = [0; tp; t ;tf];
    yr.signals.values = [1; 5; 4.8*sin(t)  ; 5];
    zr.time = [0;t; tf];
    zr.signals.values = [.5; 0.07*t.*sin(1.6*t); 0.5];
    psir.time = [0; tf];
    psir.signals.values = [0; 0];
       % 0.1*(t - 20).^2 + 2
       
  elseif experiment == 'f'
    tf = 25;
    tp = 4.0;
    t = (tp+dt:dt:(tf-tp))';
    amplitude = 5.0;
    xr.time = [0; tp; t; tf];
    xr.signals.values = [0; 0; amplitude * cos(3 * 2 * pi * (t - tp) / (tf - 2.0 * tp) + pi / 2); 0];
    yr.time = [0; tp; t; tf];
    yr.signals.values = [0; 0; amplitude * sin(2 * 2 * pi * (t - tp) / (tf - 2.0 * tp)); 0];
    zr.time = [0; tf/2; tf];
    zr.signals.values = [0; 5; 1];
    dxr = -3 * 2 * pi * (tf - 2.0 * tp)^-1 * sin(3 * 2 * pi * (t - tp) / (tf - 2.0 * tp) + pi / 2);
    dyr = 2 * 2 * pi * (tf - 2.0 * tp)^-1 * cos(2 * 2 * pi * (t - tp) / (tf - 2.0 * tp));
    psir.time = [0; tp; t; t(end) + dt; tf];
    psir.signals.values = [0; atan2(dyr(1), dxr(1)); atan2(dyr, dxr); atan2(dyr(end), dxr(end)); 0];
         
  elseif experiment == 'g'
    tf = 20;
    tp = 3.0;
    t = (tp+dt:dt:(tf-tp))';
    amplitude = 5.0;
    xr.time = [0; tp; t; tf];
    xr.signals.values = [0; 0; amplitude * cos(3 * 2 * pi * (t - tp) / (tf - 2.0 * tp) + pi / 2); 0];
    yr.time = [0; tp; t; tf];
    yr.signals.values = [0; 0; amplitude * sin(2 * 2 * pi * (t - tp) / (tf - 2.0 * tp)); 0];
    zr.time = [0; tf/2; tf];
    zr.signals.values = [0; 4; 0];
    dxr = -3 * 2 * pi * (tf - 2.0 * tp)^-1 * sin(3 * 2 * pi * (t - tp) / (tf - 2.0 * tp) + pi / 2);
    dyr = 2 * 2 * pi * (tf - 2.0 * tp)^-1 * cos(2 * 2 * pi * (t - tp) / (tf - 2.0 * tp));
    psir.time = [0; tp; t; t(end) + dt; tf];
    psir.signals.values = [0; atan2(dyr(1), dxr(1)); atan2(dyr, dxr); atan2(dyr(end), dxr(end)); 0];
         
end


simulation = simulateDrone6DoF(controller, dynamics, tf, xr, yr, zr, psir);

% Storing which experiment was executed
simulation.experiment = experiment;

end